//
// Generated file, do not edit! Created by opp_msgc 4.2 from Packet.msg.
//

#ifndef _PACKET_M_H_
#define _PACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif


namespace qlib {

// cplusplus {{
#include "QueueingDefs.h"
// }}

/**
 * Class generated from <tt>Packet.msg</tt> by opp_msgc.
 * <pre>
 * packet WRPacket
 * {
 *     @customize(true);
 *     int priority;                
 *     simtime_t totalQueueingTime; 
 *     simtime_t totalServiceTime;  
 *     simtime_t totalDelayTime;    
 *     int queueCount;              
 *     int delayCount;              
 *     int generation;              
 *     int operationCounter;			
 * }
 * </pre>
 *
 * WRPacket_Base is only useful if it gets subclassed, and WRPacket is derived from it.
 * The minimum code to be written for WRPacket is the following:
 *
 * <pre>
 * class WRPacket : public WRPacket_Base
 * {
 *   private:
 *     void copy(const WRPacket& other) { ... }

 *   public:
 *     WRPacket(const char *name=NULL, int kind=0) : WRPacket_Base(name,kind) {}
 *     WRPacket(const WRPacket& other) : WRPacket_Base(other) {copy(other);}
 *     WRPacket& operator=(const WRPacket& other) {if (this==&other) return *this; WRPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual WRPacket *dup() const {return new WRPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from WRPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(WRPacket);
 * </pre>
 */
class WRPacket_Base : public ::cPacket
{
  protected:
    int priority_var;
    simtime_t totalQueueingTime_var;
    simtime_t totalServiceTime_var;
    simtime_t totalDelayTime_var;
    int queueCount_var;
    int delayCount_var;
    int generation_var;
    int operationCounter_var;

  private:
    void copy(const WRPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WRPacket_Base&);
    // make constructors protected to avoid instantiation
    WRPacket_Base(const char *name=NULL, int kind=0);
    WRPacket_Base(const WRPacket_Base& other);
    // make assignment operator protected to force the user override it
    WRPacket_Base& operator=(const WRPacket_Base& other);

  public:
    virtual ~WRPacket_Base();
    virtual WRPacket_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class WRPacket");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual simtime_t getTotalQueueingTime() const;
    virtual void setTotalQueueingTime(simtime_t totalQueueingTime);
    virtual simtime_t getTotalServiceTime() const;
    virtual void setTotalServiceTime(simtime_t totalServiceTime);
    virtual simtime_t getTotalDelayTime() const;
    virtual void setTotalDelayTime(simtime_t totalDelayTime);
    virtual int getQueueCount() const;
    virtual void setQueueCount(int queueCount);
    virtual int getDelayCount() const;
    virtual void setDelayCount(int delayCount);
    virtual int getGeneration() const;
    virtual void setGeneration(int generation);
    virtual int getOperationCounter() const;
    virtual void setOperationCounter(int operationCounter);
};

}; // end namespace qlib

#endif // _PACKET_M_H_
